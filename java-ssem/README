Welcome to yet another simulator for the "Small Scale Experimental
Machine" built at Manchester in 1948.  This one is written as a literate
program using Java.  It uses the Java 1.1 API, and will not compile or
run under 1.0.  The interface uses the "natural" size for its
components, but appears to require a graphics display of at least
800x600 on all platforms.

The archive is separated into binary and source distributions.  The
binary distribution contains the compiled .class files, and is
available as ssem-x.y-binary.tar.gz or ssem-x.y-binary.zip, where x.y
is the version number.  The Java runtime system is not included.  If
you do not have it, you will need to get it from http://java.sun.com/.

The source distribution, ssem-x.y-source.tar.gz or ssem-x.y-source.zip,
contains the original .nw source (plus the .bib for the references),
the generated .java file, and the woven (typeset) listing in both DVI
and PostScript format.  For the stout-of-heart who wish to work from
first principles, tangling and weaving instructions are included as
comments at the top of the .nw file.  The source distribution also
contains a GIF file, which contains a screen dump of the interface
under Linux, with the simulator stopped while running the Kilburn
factorization program.

The text files in the .zip's are DOS text files:  EOL is marked by
CR/LF.  The text files in the .tar.gz's are Unix text files:  EOL is
marked by LF only.

Why Another Simulator?
---------------------

This particular simulator was written for a variety of reasons:

    1.  To teach myself Java programming.  I've found that, because of
        the simplicity of the SSEM (32 words of memory; 7 op codes),
        it's an excellent project to use for getting up to speed with
        a new language or programming environment (particularly those
        involving graphical user interfaces).
    
    2.  To develop a simulator as a literate program, which can
        explain the machine being simulated in detail as well as
        actually simulate it.  I used an LP tool called "noweb", by
        Norman Ramsey.  If you are interested in learning more about
        noweb or LP, take a look at the noweb home page:

            http://www.cs.virginia.edu/~nr/noweb

        For users who don't have access to noweb or Pretzel (see
        below), the "woven" source is provided in both DVI and
        PostScript format.

    3.  To experiment with Java code "prettyprinted" in the style of
        the Algol "publication languages".  The woven code is typeset
        using a prettyprinter generated by Felix Gaertner's Pretzel
        system:

            http://www.iti.informatik.th-darmstadt.de/~gaertner/pretzel/

        As with Algol, the typeset code puts keywords in bold,
        identifiers in italics, and uses standard mathematical symbols
        when appropriate (\gets for =, \lor for ||, \times for *, etc.).

		I find the prettyprinted code much easier to read and
		understand than plain code in a monospaced typewriter font.
		I consider this a tribute to the foresight of the Algol 60
		designers.

    4.  To (finally) provide a single simulator that will run on
        multiple platforms (this is, after all, what Java is supposed
        to provide).  Also, I hope to eventually refine this simulator
        to the point where it can be considered "definitive" in some
        real sense.

Operation
---------

Starting the program with the command line switch -demo (or -d),

    java ssem -demo

preloads the store with the famous Kilburn factorization program.

Display:

    The checkboxes to the left of each display tube control whether or
    not the contents of the tube are displayed.  Initially, they are
    displayed.  The simulator will run much faster when the displays
    are disabled.

Input & Output:

    Eventually, I intend to provide a menu bar that will allow the user
    to save and reload the contents of the Williams tubes, among other
    possible features, but at present, the simulator must be operated
    as the original (except that the Kilburn factorization program can
    be preloaded with the -d(emo) switch).

    Bits can be entered into the S tube using the "typewriter" buttons
    and the staticisor switches S0-S4.  The address of a word is set
    with the switches.  Pressing a particular typewriter button, sets
    or erases the specified bit in the selected word, depending on the
    setting of the write/erase switch.

    All of this is in "backwards binary", with the least significant
    bit on the left.

    The KSC key clears the S tube.
    The KAC key clears the A tube.
    The KCC key clears both the A and C tubes.
    The KLC key clears the word specified by S0-S4.
    The KEC key clears all 3 tubes.

Execution:

    With the auto/manual switch in "manual" position, whatever
    instruction is set up in the staticisor switches S0-S4,S13-S15
    will be executed when the KSP (KC) key is pressed.

    With the auto/manual switch in "auto" position, make sure that all
    the staticisor switches S0-S15 are closed (on).  Pressing the KSP
    key will single-step through the program in the store.

    With the auto/manual switch in "auto" position, setting the
    pre-pulse (CS) switch on will begin program execution at the point
	of the current program counter.  Execution will continue until the
    pre-pulse switch is turned off or a stop instruction (op code 7)
    is executed.

---------------------
Lee Wittenberg
leew@kean.edu

21 June 1998
